name: Docker Buildx ARMv7l with Custom Python Build (Self-Contained & Export)

on:
  workflow_dispatch: # 允许手动触发
  push:
    branches:
      - main # 在推送到 main 分支时触发

jobs:
  build:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 运行器

    steps:
      - name: 检查代码
        uses: actions/checkout@v4

      - name: 设置 QEMU
        # QEMU 是 Docker Buildx 用于模拟不同架构的关键组件
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all # 启用所有支持的平台模拟

      - name: 设置 Docker Buildx
        # 初始化 Docker Buildx 环境
        uses: docker/setup-buildx-action@v3

      - name: 构建 Docker 镜像
        id: docker_build # 为此步骤添加 ID，以便后续引用
        uses: docker/build-push-action@v5
        with:
          context: . # Dockerfile 所在的目录
          platforms: linux/arm/v7 # 指定目标平台为 ARMv7
          push: false # 这里设置为 false，表示只构建不推送到镜像仓库。
          load: true # <--- **关键修改：添加这一行，将构建的镜像加载到本地 Docker 守护进程**
          tags: my-alpine-armv7l-python-self-contained-image:latest # 镜像标签
          file: ./Dockerfile # 指定 Dockerfile 路径，如果不是默认的 './Dockerfile'
          # outputs 参数在这里可以移除，因为 load: true 已经将镜像加载到本地，
          # 并且 docker images -q 就可以找到它了。
          # outputs: type=image,name=my-alpine-armv7l-python-self-contained-image:latest,push=false

      - name: 导出 Python 安装目录
        run: |
          # 获取构建的镜像 ID
          # 现在因为 load: true，这个命令应该能正常工作
          IMAGE_ID=$(docker images -q my-alpine-armv7l-python-self-contained-image:latest)
          if [ -z "$IMAGE_ID" ]; then
            echo "Error: Image ID not found for my-alpine-armv7l-python-self-contained-image:latest"
            exit 1
          fi

          # 从镜像创建一个临时容器
          CONTAINER_ID=$(docker create "$IMAGE_ID")
          echo "Created container: $CONTAINER_ID"

          # 从容器中复制 /mnt/us/python313 目录到当前工作目录
          docker cp "$CONTAINER_ID":/mnt/us/python313 ./python313_armv7l_self_contained
          echo "Copied /mnt/us/python313 from container to ./python313_armv7l_self_contained"

          # 删除临时容器
          docker rm "$CONTAINER_ID"
          echo "Removed temporary container: $CONTAINER_ID"

          # 将复制的目录打包成 tar.gz 压缩文件
          tar -czvf python313_armv7l_self_contained.tar.gz ./python313_armv7l_self_contained
          echo "Created python313_armv7l_self_contained.tar.gz"

      - name: 上传 Python 安装包作为 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: python313_armv7l_self_contained
          path: python313_armv7l_self_contained.tar.gz
          retention-days: 7 # 保留 Artifact 7 天